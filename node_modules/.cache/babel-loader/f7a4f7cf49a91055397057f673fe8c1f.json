{"ast":null,"code":"var _jsxFileName = \"/Users/rajeevsharma/Dev/React-Projects/resort_site_using_react/src/context.js\";\nimport React, { Component } from 'react';\nimport items from './data';\nconst RoomContext = React.createContext();\n{\n  /* <RoomContext.Provider value={}></RoomContext.Provider> */\n}\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = event.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state; // all the rooms\n\n      let tempRooms = [...rooms]; // transform value\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); // filter by type\n\n      if (type !== 'all') {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } // filter by capacity\n\n\n      if (capacity != 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } // filter by price\n\n\n      tempRooms = tempRooms.filter(room => room.price < price); // filter by size\n\n      tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize); // filter by breakfast\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      } // filter by pets\n\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      } // change state\n\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  // getData\n  componentDidMount() {\n    // this.getData\n    let rooms = this.formatData(items);\n    let featuredRooms = rooms.filter(room => room.featured === true);\n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      sortedRooms: rooms,\n      featuredRooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(RoomConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 27\n      }\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["/Users/rajeevsharma/Dev/React-Projects/resort_site_using_react/src/context.js"],"names":["React","Component","items","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getRoom","slug","tempRooms","room","find","handleChange","event","target","value","checked","name","setState","filterRooms","parseInt","filter","size","componentDidMount","formatData","featured","Math","max","map","item","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport items from './data';\n\nconst RoomContext = React.createContext();\n{/* <RoomContext.Provider value={}></RoomContext.Provider> */}\nclass RoomProvider extends Component {\n    state = {\n        rooms: [],\n        sortedRooms: [],\n        featuredRooms: [],\n        loading: true,\n        type: 'all',\n        capacity: 1,\n        price: 0,\n        minPrice: 0,\n        maxPrice: 0,\n        minSize: 0,\n        maxSize: 0,\n        breakfast: false,\n        pets: false\n    };\n    // getData\n\n    componentDidMount() {\n        // this.getData\n        let rooms = this.formatData(items);\n        let featuredRooms = rooms.filter(room => room.featured === true);\n        let maxPrice = Math.max(...rooms.map(item => item.price));\n        let maxSize = Math.max(...rooms.map(item => item.size));\n        this.setState({\n            rooms, \n            sortedRooms: rooms, \n            featuredRooms, \n            loading: false,\n            price: maxPrice,\n            maxPrice,\n            maxSize\n        })\n    }\n\n    formatData(items) {\n        let tempItems = items.map(item => {\n            let id = item.sys.id;\n            let images = item.fields.images.map(image => image.fields.file.url);\n            let room = {...item.fields, images, id};\n            return room;\n        });\n        return tempItems;\n    }\n\n    getRoom = (slug) => {\n        let tempRooms = [...this.state.rooms];\n        const room = tempRooms.find((room) => room.slug === slug);\n        return room;\n    }\n\n    handleChange = event => {\n        const target = event.target;\n        const value = event.type === 'checkbox' ? target.checked : target.value;\n        const name = event.target.name;\n        this.setState({\n            [name]: value\n        }, this.filterRooms)\n    }\n\n    filterRooms = () => {\n        let { rooms, type, capacity, price, minSize, maxSize, breakfast, pets } = this.state;\n\n        // all the rooms\n        let tempRooms = [...rooms];\n\n        // transform value\n        capacity = parseInt(capacity);\n        price = parseInt(price);\n        \n\n        // filter by type\n        if(type !== 'all') {\n            tempRooms = tempRooms.filter(room => room.type === type);\n        }\n\n        // filter by capacity\n        if(capacity != 1) {\n            tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n        }\n\n        // filter by price\n        tempRooms = tempRooms.filter(room => room.price < price);\n\n        // filter by size\n        tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize);\n\n        // filter by breakfast\n        if(breakfast) {\n            tempRooms = tempRooms.filter(room => room.breakfast === true);\n        }\n\n        // filter by pets\n        if(pets) {\n            tempRooms = tempRooms.filter(room => room.pets === true);\n        }\n\n        // change state\n        this.setState({\n            sortedRooms: tempRooms\n        })\n    }\n\n    render() {\n        return (\n            <RoomContext.Provider value={{...this.state, getRoom: this.getRoom, handleChange: this.handleChange}}>\n                {this.props.children}\n            </RoomContext.Provider>\n        )\n    }\n}\n\nconst RoomConsumer = RoomContext.Consumer;\n\nexport function withRoomConsumer(Component) {\n    return function ConsumerWrapper(props) {\n        return (\n            <RoomConsumer>\n                {value => <Component{...props} context={value} />}\n            </RoomConsumer>\n        );\n    }\n}\n\nexport {RoomProvider, RoomConsumer, RoomContext}\n"]},"metadata":{},"sourceType":"module"}